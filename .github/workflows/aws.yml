# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: github-actions-ecr-cicd

# ワークフローのトリガーを「master」ブランチへのpushとpull requestとする
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# 今回は環境変数を使用せず、クレデンシャルはAWSのSecretを使用する
# env:
#   AWS_REGION: DEFAULT_REGION                   # set this to your preferred AWS region, e.g. us-west-1
#   ECR_REPOSITORY: MY_ECR_REPOSITORY           # set this to your Amazon ECR repository name
#   ECS_SERVICE: MY_ECS_SERVICE                 # set this to your Amazon ECS service name
#   ECS_CLUSTER: MY_ECS_CLUSTER                 # set this to your Amazon ECS cluster name
#   ECS_TASK_DEFINITION: ./taskdef.json # set this to the path to your Amazon ECS task definition
#                                                # file, e.g. .aws/task-definition.json
#   CONTAINER_NAME: php-apache           # set this to the name of the container in the
#                                                # containerDefinitions section of your task definition

# permisssionを設定するとOIDCが使用可能となる
permissions:
  id-token: write
  contents: read

# 実行するジョブの定義
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    # AWS認証
    - name: Configure AWS credentials
      # 以下「@」以降は「master」でないとエラーになる
      # 公式が「v1」と記載しているためエラー続発していた
      uses: aws-actions/configure-aws-credentials@v4
      with:
        # GitHubのリポジトリ上でsecretsを設定してクレデンシャルを管理する
        aws-region: ${{ secrets.AWS_REGION }}
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/githubActionsExeRole
        role-session-name: SampleRoleSession

    # ECRにログイン
    - name: Login to Amazon ECR
      # outputsを参照するためのidを設定（？）
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    # Dockerイメージをbuild & pushする
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        # ECRのレジストリを'aws-actions/amazon-ecr-login'アクションの`outputs.registry`から取得
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        # イメージをpushするECRリポジトリ名（クレデンシャル同様に秘匿管理するべき？）
        ECR_REPOSITORY: github_actions_repo
        # 任意のイメージタグ（今回はGitのコミットハッシュにしておく）
        IMAGE_TAG: ${{ github.sha }}
      # Build a docker container and push it to ECR so that it can be deployed to ECS.
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    # AWSのECSのタスク定義はdockerでいうところのdocker-compose.ymlに当たる
    # 取得するイメージや、コンテナ起動時の要件などを定義する
    # IAMのロールとして「AmazonECSTaskExecutionRolePolicy」が付与されていれば実行可能となる
    # タスク定義の更新処理を行う
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      env:
        # 任意のコンテナ名を定義する
        CONTAINER_NAME: php-apache
        # ECSのタスク定義ファイルは「application_root_path/aws/taskdef.json」ファイルを参照する
        ECS_TASK_DEFINITION: ./aws/taskdef.json
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      env:
        ECS_SERVICE: php-apache-deploy
        ECS_CLUSTER: github-actions-cicd-cluster
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
